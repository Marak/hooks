{
  "name": "marak/gateway-es7",
  "version": "1.0.0",
  "description": "",
  "language": "es7",
  "source": "// gateway hook for running es7 microservices on hook.io in real-time without an account\n\nmodule['exports'] = function gatewayHook (hook) {\n\n  var mschema = require('mschema');\n  var params = hook.params;\n  var source = params.source;\n  var code = params.source;\n  // try to compile the hot-code into a module\n      var babel = require('babel-core');\n    require(\"babel-polyfill\");\n\n  try {\n    // service is es6+, so convert it to normal javascript\n    // TODO: This may cause peformance issues, could be better to cache transpile of code\n    var opts = {\n      \"presets\": [\n       \"es2015\",\n       \"stage-3\"\n      ],\n      \"plugins\": [\"syntax-async-functions\",\"transform-regenerator\"]\n    };\n    //console.log(code)\n\n    code = babel.transform(code, opts).code;\n    // brittle approach to wrap es7 in module.exports\n    // TODO: better integration with generated JS\n    code = code.split('\\n');\n    code.shift();\n    code.shift();\n    code = code.join('\\n');\n    code = 'var exports = module[\"exports\"];\\n\\n' + code;\n  } catch (err) {\n    hook.res.end(\"source code not parse! \\n\\n    \" + err.message);\n  }\n  //hook.res.end(code);\n  //return;\n  // try to compile the hot-code into a module\n    var Module = module.constructor;\n    var m = new Module();\n    m.paths = module.paths;\n    m._compile(code, 'hook.io-gateway');  \n   //var m = new Function(code);\n  // map incoming parameters, but don't include source code\n  var props = {};\n  for (p in params) {\n    if (p !== 'source') {\n      props[p] = params[p];\n    }\n  }\n\n  // perform validation on input schema ( if it exists )\n  //var defaults = mschema.validate(props, m.exports.schema || {}, { strict: false });\n  var defaults = {};\n  // normally validation is performed by the hook itself, but since we are inside\n  // the gateway hook ( and doing a hot-code run inside an existing hook ),\n  // we have to repeat some logic\n  \n  // In the future if we are going to add view-presenter pattern to hot-code,\n  // or other hook processing code, we will need to refactor the hook resource,\n  // so we don't end up duplicating more code\n  if (defaults.valid === false) {\n    return hook.res.end('Invalid data');\n  }\n\n  // map validated / defaulted data to params\n  hook.params = defaults.instance;\n  //console.log(hook.params);\n  //hook.res.json(m);\n  //console.log(m.exports)\n  //m(hook)\n  m.exports.default(hook);\n};",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Marak",
  "license": "MIT"
}