{
  "name": "marak/gateway-coffee-script",
  "version": "1.0.0",
  "language": "coffee",
  "source": "// gateway hook for running microservices on hook.io in real-time without an account\n\n// covers all JavaScript and Coffee-script\n\n// example of deploying a js file to the hook.io cloud from the command line using cURL\n\n// cat echo.js | curl --data-urlencode source@- http://gateway.hook.io\n\nmodule['exports'] = function gatewayHook (hook) {\n\n  var mschema = require('mschema');\n  var params = hook.params;\n  var source = params.source;\n  var code;\n  // try to compile the hot-code into a module\n  try {\n    // service is coffee-script, so convert it to javascript\n    var CoffeeScript = require('coffee-script');\n    code = CoffeeScript.compile(source);\n    // brittle approach to remove coffee-script wrap,\n    // we don't need / can't use the wrap as it was breaking our module['exports'] metaprogramming\n    // TODO: better integration with generated JS\n    code = code.split('\\n');\n    code.pop();\n    code.pop();\n    code.shift();\n    // removes top and bottom generated lines\n    code = code.join('\\n')\n  } catch (err) {\n    hook.res.end(\"source code not parse! \\n\\n    \" + err.message);\n  }\n  \n  // try to compile the hot-code into a module\n  try {\n    var Module = module.constructor;\n    var m = new Module();\n    m.paths = module.paths;\n    m._compile(code, 'hook.io-gateway');  \n  } catch (err) {\n    hook.res.end(\"No valid module['exports'] function was exported! \\n\\n    \" + err.message);\n  }\n\n  // map incoming parameters, but don't include source code\n  var props = {};\n  for (p in params) {\n    if (p !== 'source') {\n      props[p] = params[p];\n    }\n  }\n\n  // perform validation on input schema ( if it exists )\n  var defaults = mschema.validate(props, m.exports.schema || {}, { strict: false });\n\n  // normally validation is performed by the hook itself, but since we are inside\n  // the gateway hook ( and doing a hot-code run inside an existing hook ),\n  // we have to repeat some logic\n  \n  // In the future if we are going to add view-presenter pattern to hot-code,\n  // or other hook processing code, we will need to refactor the hook resource,\n  // so we don't end up duplicating more code\n  if (defaults.valid === false) {\n    return hook.res.end('Invalid data');\n  }\n\n  // map validated / defaulted data to params\n  hook.params = defaults.instance;\n  console.log(hook.params);\n  \n  m.exports(hook);\n};",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Marak",
  "license": "MIT"
}